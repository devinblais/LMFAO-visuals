<div style="position:absolute;top:0;left:0;background:#efefef;z-index:99999;height:200px;">
  <a href="/ph" >Show Power Hour </a><br />
  <a href="/" >Show Video</a>
</div>
<video id="video" autoplay style="display:none" src="/assets/media/SexyandIKnowIt.m4v"></video> 
<div id="timeLeft">
  <span></span>
</div>
<script type="text/javascript">

  $(function() {
      (function updateTime() {
       var time = new Date(),
       mLeft = 60 - time.getMinutes(),
       sLeft = 60 - time.getSeconds(),
       milliLeft = 1000 - time.getMilliseconds();
       $("#timeLeft span").text(mLeft+":"+sLeft+"."+milliLeft);
       setTimeout(updateTime, 10);
       })()
      })

if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

var container;

var camera, scene, renderer;

var video, texture, material, mesh;

var composer;

var mouseX = 0;
var mouseY = 0;
var mouseDest = {dx:5, dy:5, x:0, y:0, done:true}

var windowHalfX = window.innerWidth / 2;
var windowHalfY = window.innerHeight / 2;

var particleSystem,
  particleCount = 1000,
  particles = new THREE.Geometry();

var cube_count,

    meshes = [],
    materials = [],

    xgrid = 20,
    ygrid = 20;

init();
animate();

function init() {

  container = document.createElement( 'div' );
  document.body.appendChild( container );

  scene = new THREE.Scene();

  camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 10000 );
  camera.position.z = 500;
  scene.add( camera );

  var light = new THREE.DirectionalLight( 0xffffff );
  light.position.set( 0.5, 1, 1 ).normalize();
  scene.add( light );

  // Particles!
  // create the particle variables
      // create the particle variables
  var pMaterial =
  new THREE.ParticleBasicMaterial({
    color: 0xFFFFFF,
    size: 50,
    map: THREE.ImageUtils.loadTexture(
      "assets/particle.png"
    ),
    blending: THREE.AdditiveBlending,
    transparent: true
  });


// now create the individual particles
for(var p = 0; p < particleCount; p++) {

  // create a particle with random
  // position values, -250 -> 250
  var pX = Math.random() * 1000 - 500,
      pY = Math.random() * 500 - 250,
      pZ = Math.random() * 500 - 250,
      particle = new THREE.Vertex(
          new THREE.Vector3(pX, pY, pZ)
          );

  // Apply random (negative) y velocity to particles so they appear to be falling
  particle.velocity = new THREE.Vector3(0,-Math.random(),0);

  // add it to the geometry
  particles.vertices.push(particle);
}

// create the particle system
particleSystem =
new THREE.ParticleSystem(
    particles,
    pMaterial);

// also update the particle system to
// sort the particles which enables
// the behaviour we want
particleSystem.sortParticles = true;

// add it to the scene
scene.add(particleSystem);

// END particles!


renderer = new THREE.WebGLRenderer( { antialias: false } );
renderer.setSize( window.innerWidth, window.innerHeight );

container.appendChild( renderer.domElement );

video = document.getElementById( 'video' );

texture = new THREE.Texture( video );
texture.minFilter = THREE.LinearFilter;
texture.magFilter = THREE.LinearFilter;
texture.format = THREE.RGBFormat;

var i, j, ux, uy, ox, oy,
    geometry,
    xsize, ysize;

ux = 1 / xgrid;
uy = 1 / ygrid;

xsize = 480 / xgrid;
ysize = 204 / ygrid;

var parameters = { color: 0xffffff, map: texture },
    material_base = new THREE.MeshLambertMaterial( parameters );

renderer.initMaterial( material_base, scene.__lights, scene.fog );

cube_count = 0;

for ( i = 0; i < xgrid; i ++ )
for ( j = 0; j < ygrid; j ++ ) {

  ox = i;
  oy = j;

  geometry = new THREE.CubeGeometry( xsize, ysize, xsize );
  change_uvs( geometry, ux, uy, ox, oy );

  materials[ cube_count ] = new THREE.MeshLambertMaterial( parameters );

  material = materials[ cube_count ];

  mesh = new THREE.Mesh( geometry, material );

  mesh.position.x =   ( i - xgrid/2 ) * xsize;
  mesh.position.y = - ( j - ygrid/2 ) * ysize;
  mesh.position.z = 0;

  mesh.scale.x = mesh.scale.y = mesh.scale.z = 1;

  scene.add(mesh);

  mesh.dx = 0.001 * ( 0.5 - Math.random() );
  mesh.dy = 0.001 * ( 0.5 - Math.random() );

  meshes[ cube_count ] = mesh;

  cube_count += 1;

}

renderer.autoClear = false;

// postprocessing

var renderModel = new THREE.RenderPass( scene, camera );
var effectBloom = new THREE.BloomPass( 1.3 );
var effectScreen = new THREE.ShaderPass( THREE.ShaderExtras[ "screen" ] );

effectScreen.renderToScreen = true;

composer = new THREE.EffectComposer( renderer );

composer.addPass( renderModel );
composer.addPass( effectBloom );
composer.addPass( effectScreen );

}

function change_uvs( geometry, unitx, unity, offsetx, offsety ) {

  var i, j, uv;

  for ( i = 0; i < geometry.faceVertexUvs[ 0 ].length; i++ ) {

    uv = geometry.faceVertexUvs[ 0 ][ i ];

    for ( j = 0; j < uv.length; j++ ) {

      uv[j].u = ( uv[j].u + offsetx ) * unitx;
      uv[j].v = ( uv[j].v + offsety ) * unity;

    }

  }

}


function randomMouseMove() {
  if(mouseDest.done) {
    mouseDest.x = windowHalfX/2*-1 + Math.floor(Math.random() * windowHalfX);
    mouseDest.y = windowHalfY/2*-1 + Math.floor(Math.random() * windowHalfY);
    mouseDest.done = false;

    var xdist = mouseDest.x - mouseX;
    var ydist = mouseDest.y - mouseY;
    mouseDest.dx = xdist/50;
    mouseDest.dy = ydist/50;
  } 

  mouseX += mouseDest.dx;
  mouseY += mouseDest.dy;

  var xdist = Math.abs(mouseX - mouseDest.x);
  var ydist = Math.abs(mouseY - mouseDest.y);
  if(xdist < 5 && ydist < 5) {
    mouseDest.done = true;
  }

}

//

function animate() {

  requestAnimationFrame( animate );

  render();

}

var h, counter = 1;

function render() {
  randomMouseMove()

  var time = Date.now() * 0.00005;

  camera.position.x += ( mouseX - camera.position.x ) * 0.05;
  camera.position.y += ( - mouseY - camera.position.y ) * 0.05;

  camera.lookAt( scene.position );

  if ( video.readyState === video.HAVE_ENOUGH_DATA ) {

    if ( texture ) texture.needsUpdate = true;

  }

  //particles!
  particleSystem.rotation.y += 0.01;

    var pCount = particleCount;
    while(pCount--) {
      var particle = particles.vertices[pCount];

      // Reset particles that fall too low
      if(particle.position.y < -200) {
        particle.position.y = 200;
        particle.velocity.y = 0;
      }

      particle.velocity.y -= Math.random() *.1;

      particle.position.addSelf(particle.velocity);
    }
    particleSystem.geometry.__dirtyVertices = true;

  // END particles


  for( i = 0; i < cube_count; i++ ) {

    material = materials[i];

    h = ( 360 * ( material.hue + time ) % 360 ) / 360;
    material.color.setHSV( h, material.saturation, 1 );

  }

  if( counter % 500  > 200 ) {

    for( i = 0; i < cube_count; i++ ) {

      mesh = meshes[i];

      mesh.position.z += 100 * mesh.dx;

    }

  }

  if( counter % 500  == 0 ) {

    for( i = 0; i < cube_count; i++ ) {

      mesh = meshes[i];

      mesh.dx *= -1;
      mesh.dy *= -1;

    }

  }

  counter ++;

  renderer.clear();
  composer.render();


}
</script>

